#!/usr/bin/env python

# pyinfra
# File: bin/pyinfra
# Desc: __main__ for pyinfra

'''
pyinfra

Usage:
    pyinfra -c CONFIG_FILE DEPLOY_FILE
    pyinfra -c CONFIG_FILE DEPLOY_FILE [-v] [--dry] [--serial]
    pyinfra -c CONFIG_FILE --fact FACT_NAME
    pyinfra --help

Options:
    DEPLOY_FILE             Deploy file.
    -c --config CONFIG_FILE Config file.
    --dry                   Only print proposed changes. Add -v to print commands.
    --serial                Run commands on one host at a time.
    -v -vv                  Show debug output.
    --fact FACT_NAME        Name of fact to run/test.
    -h --help               Show this screen.
    --version               Show version.
'''

# You can't import me!
import sys
if __name__ != '__main__':
    sys.exit(1)

# Async things
from gevent import monkey
monkey.patch_all()

# Handle ctrl+c
import signal
def signal_handler(signum, frame):
    print 'Exiting upon user request!'
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# Setup arguments
from docopt import docopt
from pyinfra import config
version = 'pyinfra v{0}'.format(config.VERSION)
arguments = docopt(__doc__, version=version)
config_file = arguments['--config']
deploy_file = arguments['DEPLOY_FILE']
verbosity = arguments['-v']
fact_name = arguments['--fact']
serial = arguments['--serial']
dry = arguments['--dry']


print ''
print '-> Welcome to {0}'.format(version)
print ''

import imp
import logging

from coloredlogs import ColoredStreamHandler
from termcolor import colored
from gevent.pool import Pool

import pyinfra
from pyinfra import logger
from pyinfra.api import ssh, server

# Setup logs
VERBOSITY_TO_LOG = {
    0: logging.INFO,
    1: logging.DEBUG
}
log_args = {
    'show_timestamps': False,
    'show_hostname': False,
    'show_name': False
}
# Log handler
handler = ColoredStreamHandler(level=VERBOSITY_TO_LOG[verbosity], **log_args)
# Set root logger critical
logging.getLogger().disabled = True
# Remove pSSH's host_logger
logging.getLogger('host_logger').disabled = True
# Set our logger to level
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)


# Let's do this!
logger.info('Starting...')

# Load the global config file into pyinfra
logger.debug('Importing config.py')
config = pyinfra.config = imp.load_source('pyinfra.config', config_file)

# Create greenlet pool (max 100 greenlets)
pyinfra._pool = Pool(size=min(len(pyinfra.config.SSH_HOSTS), 100))

# Connect to all the servers (old fashioned thread based)
logger.info('Connecting to all servers...')
ssh.connect_all()

# Setup internals
for host in config.SSH_HOSTS:
    pyinfra._ops[host] = []
    pyinfra._facts[host] = {
        '_dirs': {}, # cache remote directory meta
        '_files': {} # cache remote file meta
    }
    pyinfra._meta[host] = {
        'ops': 0, # one function call in a deploy file
        'commands': 0 # actual # of commands to run
    }
    pyinfra._results[host] = {
        'success_ops': 0,
        'error_ops': 0,
        'success_commands': 0,
        'error_commands': 0
    }


# No deploy file, we're getting a fact
if deploy_file is None:
    for host in config.SSH_HOSTS:
        # Call the fact
        pyinfra._current_server = host
        print server.fact(fact_name)

else:
    # Build our deploy script for each server (synchronously)
    logger.info('Building deploy scripts...')
    for host in config.SSH_HOSTS:
        logger.debug('Building deploy script for {0}'.format(host))
        # Call the deploy script
        pyinfra._current_server = host
        execfile(deploy_file)

    if dry:
        print 'DO DRY SHIT'
        print pyinfra._commands

    else:
        logger.info('Beginning command run...')
        if serial:
            ssh.run_serial()
        else:
            ssh.run_all()

    # Always show meta output
    logger.info('Proposed changes:')
    for host, meta in pyinfra._meta.iteritems():
        logger.info(
            '{0}\tOperations: {1}\t    Commands: {2}'.format(
                host, meta['ops'], meta['commands']
            )
        )

    # Show results when run
    if not dry:
        logger.info('Results:')
        for host, results in pyinfra._results.iteritems():
            success_ops = colored(results['success_ops'], attrs=['bold'])
            error_ops = results['error_ops']
            error_ops = error_ops if error_ops == 0 else colored(error_ops, 'red')

            success_commands = colored(results['success_commands'], attrs=['bold'])
            error_commands = results['error_commands']
            error_commands = error_commands if error_commands == 0 else colored(error_commands, 'red')

            logger.info(
                '{0}\tOperations: {1}/{2}\t    Commands: {3}/{4}'.format(
                    host, success_ops, error_ops,
                    success_commands, error_commands
                )
            )

print ''
print '<- Thank you, goodbye'
print ''

sys.exit(0)
