#!/usr/bin/env python

# pyinfra
# File: bin/pyinfra
# Desc: __main__ for pyinfra

'''
pyinfra

Usage:
    pyinfra -c CONFIG_FILE DEPLOY_FILE
    pyinfra -c CONFIG_FILE DEPLOY_FILE [-v] [--dry] [--serial] [--nowait] [--debug]
    pyinfra -c CONFIG_FILE --fact FACT_NAME
    pyinfra --help

Options:
    DEPLOY_FILE             Deploy file.
    -c --config CONFIG_FILE Config file.
    --dry                   Only print proposed changes.
    --serial                Run commands on one host at a time.
    --nowait                Don't wait for all hosts at each operation.
    -v                      Prints out remote output in realtime.
    --debug                 Print debug info.
    --fact FACT_NAME        Name of fact to run/test.
    -h --help               Show this screen.
    --version               Show version.
'''

# You can't import me!
import sys
if __name__ != '__main__':
    sys.exit(1)

# Async things
from gevent import monkey
monkey.patch_all()

# Handle ctrl+c
import signal
def signal_handler(signum, frame):
    print 'Exiting upon user request!'
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# Setup arguments
from docopt import docopt
from pyinfra import config
version = 'pyinfra v{0}'.format(config.VERSION)
arguments = docopt(__doc__, version=version)
config_file = arguments['--config']
deploy_file = arguments['DEPLOY_FILE']
verbosity = arguments['-v']
dry = arguments['--dry']
serial = arguments['--serial']
nowait = arguments['--nowait']
debug = arguments['--debug']
fact_name = arguments['--fact']


print
print '-> Welcome to {0}'.format(version)
print

import imp
import json
import logging
from logging import Formatter

from coloredlogs import ColoredStreamHandler
from termcolor import colored
from gevent.pool import Pool

import pyinfra
from pyinfra import logger
from pyinfra.api import ssh, host

# Setup logs
log_args = {
    'show_timestamps': False,
    'show_hostname': False,
    'show_name': False
}
log_level = logging.DEBUG if debug else logging.INFO
# Log formatter
formatter = Formatter('\e[0K\r%(message)s                                                         ') # TODO: remove spaces hack
# Log handler
handler = ColoredStreamHandler(level=log_level, **log_args)
handler.setFormatter(formatter)
# Set root logger critical
logging.getLogger().setLevel(logging.CRITICAL)
# Set our logger to level
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)
# Disable the pssh host logger
logging.getLogger('host_logger').disabled = True


# Let's do this!
logger.info('Starting...')

# Load the global config file into pyinfra
logger.debug('Importing config.py')
config = pyinfra.config = imp.load_source('pyinfra.config', config_file)

# Create greenlet pool (max 100 greenlets)
pyinfra._pool = Pool(size=min(len(pyinfra.config.SSH_HOSTS), 100))

# Connect to all the servers (old fashioned thread based)
logger.info('Connecting to all servers...')
ssh.connect_all()

# Setup internals
for hostname in config.SSH_HOSTS:
    pyinfra._ops[hostname] = {}
    pyinfra._facts[hostname] = {
        '_dirs': {}, # cache remote directory meta
        '_files': {} # cache remote file meta
    }
    pyinfra._meta[hostname] = {
        'ops': 0, # one function call in a deploy file
        'commands': 0 # actual # of commands to run
    }
    pyinfra._results[hostname] = {
        'ops': 0, # success_ops + failed ops w/ignore_errors
        'success_ops': 0,
        'error_ops': 0,
        'commands': 0
    }


# No deploy file, we're getting a fact
if deploy_file is None:
    for hostname in config.SSH_HOSTS:
        # Call the fact
        pyinfra._current_server = hostname
        print host.fact(fact_name)

else:
    # Build our deploy script for each server (synchronously)
    print
    logger.info('Building deploy scripts...')
    for hostname in config.SSH_HOSTS:
        logger.debug('Building deploy script for {0}'.format(hostname))
        # Call the deploy script
        pyinfra._current_server = hostname
        execfile(deploy_file)

    if not dry:
        print
        logger.info('Beginning operation run...')
        ssh.run_ops(
            serial=serial,
            nowait=nowait,
            print_output=verbosity > 0
        )

    # Always show meta output
    print
    logger.info('Proposed changes:')
    for hostname, meta in pyinfra._meta.iteritems():
        logger.info(
            '{0}\tOperations: {1}\t    Commands: {2}'.format(
                hostname, meta['ops'], meta['commands']
            )
        )

    # Show results when run
    if not dry:
        print
        logger.info('Results:')
        for hostname, results in pyinfra._results.iteritems():
            meta = pyinfra._meta[hostname]
            success_ops = results['success_ops']
            error_ops = results['error_ops']

            # If all ops got complete (even with ignored_errors)
            if results['ops'] == meta['ops']:
                # Yellow if ignored any errors, else green
                color = 'green' if error_ops == 0 else 'yellow'
                host_string = colored(hostname, color)
            # Ops did not complete!
            else:
                host_string = colored(hostname, 'red', attrs=['bold'])

            logger.info('{0}\tSuccessful: {1}\t    Errors: {2}\t    Commands: {3}/{4}'.format(
                host_string,
                colored(success_ops, attrs=['bold']),
                error_ops if error_ops == 0 else colored(error_ops, 'red', attrs=['bold']),
                results['commands'], meta['commands']
            ))

    if dry and verbosity > 0:
        print
        logger.info('Proposed operations:')
        print json.dumps(pyinfra._ops, indent=4)
        print
        logger.info('Operation order:')
        print json.dumps(pyinfra._op_order, indent=4)

print
print '<- Thank you, goodbye'
print

sys.exit(0)
