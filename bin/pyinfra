#!/usr/bin/env python

# pyinfra
# File: bin/pyinfra
# Desc: __main__ for pyinfra

'''
pyinfra

Usage:
  pyinfra --config CONFIG_FILE DEPLOY_FILE [--dry] [--local] [-v]
  pyinfra --help

Options:
  DEPLOY_FILE             Deploy file.
  -c --config CONFIG_FILE Config file.
  --dry                   Only print out commands.
  -v                      Show debug output.
  -h --help               Show this screen.
  --version               Show version.
'''

# You can't import me!
import sys
if __name__ != '__main__':
    sys.exit(1)

# Handle ctrl+c
import signal
def signal_handler(signum, frame):
    print 'Exiting upon user request!'
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# Setup arguments
from docopt import docopt
from pyinfra import config
version = 'pyinfra v{0}'.format(config.VERSION)
arguments = docopt(__doc__, version=version)
config_file = arguments['--config']
deploy_file = arguments['DEPLOY_FILE']
verbosity = arguments['-v']

print ''
print '=> Welcome to {0}'.format(version)
print ''

import imp
import logging

from coloredlogs import ColoredStreamHandler
from gevent.pool import Pool

import pyinfra
from pyinfra import logger
from pyinfra.api import ssh

# Setup logs
VERBOSITY_TO_LOG = {
    0: logging.INFO,
    1: logging.DEBUG
}
log_args = {
    'show_timestamps': False,
    'show_hostname': False,
    'show_name': False
}
# Log handler
handler = ColoredStreamHandler(level=VERBOSITY_TO_LOG[verbosity], **log_args)
# Set root logger critical
logging.getLogger().setLevel(logging.CRITICAL)
# Set our logger to level
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)


# Let's do this!
logger.info('Starting...')

# Load the global config file into pyinfra
logger.debug('Importing config.py')
config = pyinfra.config = imp.load_source('pyinfra.config', config_file)

# Connect to all the servers (old fashioned thread based)
logger.info('Connecting to all servers...')
ssh.connect_all()

# Create greenlet pool
pyinfra._pool = Pool(size=len(pyinfra.config.SSH_HOSTS))

# Setup internals
for server in config.SSH_HOSTS:
    pyinfra._commands[server] = []
    facts = {
        '_dirs': {},
        '_files': {}
    }
    pyinfra._facts[server] = facts

# Build our deploy script for each server (synchronously)
logger.info('Building deploy scripts...')
for server in config.SSH_HOSTS:
    logger.debug('Building deploy script for {0}'.format(server))
    # Call the deploy script
    pyinfra._current_server = server
    execfile(deploy_file)

# Just printing?
if arguments['--dry']:
    for server, commands in pyinfra._commands.iteritems():
        print '# Commands for: {0}'.format(server)
        for command in commands:
            print '    {0}'.format(command['command'])
# Asynchronously run our command sets on each server
else:
    logger.info('Beginning command run...')
    ssh.run_all()

print ''
print '<= Thank you, goodbye'
print ''

sys.exit(0)
